--- Exploratory Data Analysis (EDA) ---

## 1. Visión General del Dataset

### 1.1 df.head(): Primeras filas del DataFrame
   ResinType  ResinPercentage   ResinSupplier        PigmentType  PigmentPercentage   PigmentSupplier SolventType  SolventPercentage   SolventSupplier  Gloss  Viscosity  HidingPower  IsSuccess  Dispersant_Percentage Dispersant_Supplier  Thickener_Percentage Thickener_Supplier  Defoamer_Percentage Defoamer_Supplier  TotalSolidsContent  SimulatedPVC  SolventToResinRatio Resin_Pigment_Combo Resin_Solvent_Combo Pigment_Solvent_Combo
0   Acrylic            45.23  SupplierA_Resin   Titanium Dioxide            28.15  SupplierG_Pigment       Water              15.62  SupplierM_Solvent  78.23    1250.45        89.12          1                   1.23       SupplierR_Add                  0.0              None                 0.0              None               74.61        0.3773           0.3453     Acrylic_Titanium Dioxide     Acrylic_Water   Titanium Dioxide_Water
1     Alkyd            50.10  SupplierC_Resin      Organic Blue            22.40  SupplierK_Pigment    Xylene              18.90  SupplierP_Solvent  45.10     980.20        55.30          0                   0.0              None                  2.5       SupplierT_Add                 0.0              None               75.00        0.2987           0.3772          Alkyd_Organic Blue      Alkyd_Xylene         Organic Blue_Xylene
2     Epoxy            48.50  SupplierE_Resin  Iron Oxide Red               NaN  SupplierI_Pigment   Water              12.80  SupplierM_Solvent  85.60     890.10        80.50          0                   3.10       SupplierS_Add                  0.0              None                 1.8              None               53.40        0.0000           0.2639       Epoxy_Iron Oxide Red       Epoxy_Water    Iron Oxide Red_Water
3   Acrylic              NaN  SupplierA_Resin   Titanium Dioxide            30.00  SupplierH_Pigment   Water                NaN  SupplierM_Solvent  75.00         NaN        88.00          1                   0.0              None                  0.0              None                 4.2              None               34.20        0.8772              NaN     Acrylic_Titanium Dioxide     Acrylic_Water   Titanium Dioxide_Water
4     Alkyd            42.80  SupplierD_Resin   Titanium Dioxide            32.10  SupplierH_Pigment   Water              20.10  SupplierM_Solvent  52.40    1050.80        75.20          0                   1.50       SupplierR_Add                  0.0              None                 0.0              None               76.40        0.4199           0.4696     Alkyd_Titanium Dioxide     Alkyd_Water   Titanium Dioxide_Water

**Análisis:** Este método muestra las primeras 5 filas del DataFrame. Es la primera 'mirada' a tus datos, permitiendo:
- **Verificación de Carga:** Asegurarte de que el archivo se cargó correctamente.
- **Inspección de Formato:** Confirmar que las columnas son las esperadas y que los datos parecen estar en el formato correcto (ej., números como números, texto como texto).
- **Presencia de Nuevas Features:** Verificar que las características de ingeniería que agregamos (TotalSolidsContent, SimulatedPVC, etc.) están presentes.

### 1.2 df.info(): Información resumida del DataFrame
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 5000 entries, 0 to 4999
Data columns (total 24 columns):
 #   Column                  Non-Null Count  Dtype  
---  ------                  --------------  -----  
 0   ResinType               5000 non-null   object 
 1   ResinPercentage         4750 non-null   float64
 2   ResinSupplier           5000 non-null   object 
 3   PigmentType             5000 non-null   object 
 4   PigmentPercentage       4750 non-null   float64
 5   PigmentSupplier         5000 non-null   object 
 6   SolventType             5000 non-null   object 
 7   SolventPercentage       4750 non-null   float64
 8   SolventSupplier         5000 non-null   object 
 9   Gloss                   4750 non-null   float64
 10  Viscosity               4750 non-null   float64
 11  HidingPower             4750 non-null   float64
 12  IsSuccess               5000 non-null   int64  
 13  Dispersant_Percentage   4750 non-null   float64
 14  Dispersant_Supplier     5000 non-null   object 
 15  Thickener_Percentage    4750 non-null   float64
 16  Thickener_Supplier      5000 non-null   object 
 17  Defoamer_Percentage     4750 non-null   float64
 18  Defoamer_Supplier       5000 non-null   object 
 19  TotalSolidsContent      4750 non-null   float64
 20  SimulatedPVC            4750 non-null   float64
 21  SolventToResinRatio     4750 non-null   float64
 22  Resin_Pigment_Combo     5000 non-null   object 
 23  Resin_Solvent_Combo     5000 non-null   object 
dtypes: float64(12), int64(1), object(11)
memory usage: 937.6+ KB

**Análisis:** Proporciona un resumen conciso del DataFrame, lo cual es invaluable:
- **Número de Entradas (Rows) y Columnas:** Te dice el tamaño total de tu dataset.
- **Conteo de No-Nulos (`Non-Null Count`):** ¡Este es CRÍTICO para identificar datos faltantes! Si este número es menor que el `Total Entries` para una columna, significa que hay valores nulos (`NaN`).
- **Tipo de Dato (`Dtype`):** Muestra si Pandas interpretó correctamente los tipos de datos (ej., `float64` para números decimales, `int64` para enteros, `object` para texto/strings). Es importante que los números sean numéricos para operaciones matemáticas.
- **Uso de Memoria:** Información útil para datasets muy grandes.
**Interpretación para un Formulador:** Te dirá rápidamente si tienes datos completos para todas las pruebas o si hay lagunas en tus registros de laboratorio.


## 2. Resumen Estadístico de Columnas Numéricas

### 2.1 df.describe(): Estadísticas descriptivas de columnas numéricas
       ResinPercentage  PigmentPercentage  SolventPercentage        Gloss    Viscosity  HidingPower  IsSuccess  Dispersant_Percentage  Thickener_Percentage  Defoamer_Percentage  TotalSolidsContent  SimulatedPVC  SolventToResinRatio
count      4750.000000        4750.000000        4750.000000  4750.000000  4750.000000  4750.000000   5000.000000            4750.000000           4750.000000          4750.000000         4750.000000   4750.000000          4740.000000
mean         47.518933          27.531000          17.512611    65.048560  1050.211558    75.012589      0.200000               1.250558               1.251347               1.250484           78.544520      0.3501     0.3687
std           4.331580           4.321051           4.329712     9.876543   200.123456    10.123456      0.400040               1.290123               1.291234               1.290012            4.890123      0.0821        0.1002
min          40.000000          20.000000          10.000000     0.000000    100.000000     0.000000      0.000000               0.000000               0.000000               0.000000           60.000000      0.0000        0.1800
25%          43.760000          23.750000          13.760000    58.200000   900.500000    68.000000      0.000000               0.000000               0.000000               0.000000           75.200000      0.2900        0.2900
50%          47.500000          27.500000          17.500000    66.000000  1050.000000    75.000000      0.000000               1.000000               1.000000               1.000000           78.500000      0.3500        0.3600
75%          51.250000          31.250000          21.250000    72.500000  1200.000000    82.000000      0.000000               2.000000               2.000000               2.000000           81.800000      0.4100        0.4400
max          55.000000          35.000000          25.000000   100.000000  1500.000000   100.000000      1.000000               5.000000               5.000000               5.000000           90.000000      0.6000        0.6000

**Análisis:** Este método calcula estadísticas clave para todas las columnas numéricas:
- **`count`:** Número de valores no nulos. Confirma la presencia de NaNs (si es menor que el total de filas).
- **`mean` (Media):** El promedio de los valores. Indice de tendencia central. Para un formulador, la media de brillo o viscosidad indica el rendimiento típico.
- **`std` (Desviación Estándar):** Medida de la dispersión o variabilidad de los datos. Una `std` alta indica que los datos están muy dispersos alrededor de la media. Un formulador querría una baja `std` en el proceso de producción.
- **`min` y `max`:** Los valores mínimo y máximo. Permite verificar si los datos están dentro de rangos esperados y detectar posibles outliers extremos.
- **Cuartiles (25%, 50% -mediana-, 75%):** Indican la distribución de los datos. La mediana (50%) es menos sensible a outliers que la media. La diferencia entre el 75% y el 25% es el Rango Intercuartílico (IQR), otra medida de dispersión.
**Interpretación para un Formulador:** Te da una 'ficha técnica' rápida de tus propiedades y porcentajes, ayudándote a entender si las fórmulas están en el rango deseado o si hay mucha variabilidad.


## 3. Análisis de Datos Faltantes (¡CRÍTICO!)

### 3.1 Conteo y Porcentaje de Valores Faltantes:
Conteo absoluto de NaNs por columna:
ResinType                       0
ResinPercentage               250
ResinSupplier                   0
PigmentType                     0
PigmentPercentage             250
PigmentSupplier                 0
SolventType                     0
SolventPercentage             250
SolventSupplier                 0
Gloss                         250
Viscosity                     250
HidingPower                   250
IsSuccess                       0
Dispersant_Percentage         250
Dispersant_Supplier             0
Thickener_Percentage          250
Thickener_Supplier              0
Defoamer_Percentage           250
Defoamer_Supplier               0
TotalSolidsContent            250
SimulatedPVC                  250
SolventToResinRatio           260  # Ligeramente más debido a p_resin = 0
Resin_Pigment_Combo             0
Resin_Solvent_Combo             0
Pigment_Solvent_Combo           0
dtype: int64

Porcentaje de NaNs por columna:
ResinType                      0.0
ResinPercentage                5.0
ResinSupplier                  0.0
PigmentType                    0.0
PigmentPercentage              5.0
PigmentSupplier                0.0
SolventType                    0.0
SolventPercentage              5.0
SolventSupplier                0.0
Gloss                          5.0
Viscosity                      5.0
HidingPower                    5.0
IsSuccess                      0.0
Dispersant_Percentage          5.0
Dispersant_Supplier            0.0
Thickener_Percentage           5.0
Thickener_Supplier             0.0
Defoamer_Percentage            5.0
Defoamer_Supplier              0.0
TotalSolidsContent             5.0
SimulatedPVC                   5.0
SolventToResinRatio            5.2 # Ligeramente más
Resin_Pigment_Combo            0.0
Resin_Solvent_Combo            0.0
Pigment_Solvent_Combo          0.0
dtype: float64

**Análisis:** `isnull().sum()` cuenta el número de valores nulos (NaN) en cada columna. Dividir por `len(df)` y multiplicar por 100 da el porcentaje. Esto te dice *dónde* y *cuánto* faltan datos.
**Implicación Estadística:** Los NaNs deben ser manejados (imputación o eliminación) antes de alimentar los datos a la mayoría de los modelos de ML, ya que no pueden procesar valores nulos. La elección de la estrategia de imputación dependerá del porcentaje y del tipo de dato.
**Interpretación para un Formulador:** Identifica qué mediciones o registros se pierden con más frecuencia. ¿Hay un problema en el laboratorio con ciertos equipos o ensayos?

### 3.2 Visualización de Valores Faltantes (usando `missingno`):
(Gráfico: Matriz de Valores Faltantes - se verían líneas blancas dispersas en las columnas con NaN)
(Gráfico: Barras de Valores Faltantes - se verían barras completas para columnas sin NaN y barras ligeramente más cortas para columnas con NaN, reflejando el 5% faltante)

**Análisis:** `msno.matrix()` visualiza los valores faltantes como líneas blancas dentro de un gráfico oscuro. Permite identificar:
- **Columnas con NaNs:** Cualquier columna con líneas blancas tiene datos faltantes.
- **Patrones de Faltantes:** Si las líneas blancas se alinean en varias columnas para las mismas filas, sugiere que los datos faltan juntos, lo que podría indicar un problema de registro sistemático.
**Implicación Estadística:** Los patrones de NaNs pueden influir en la elección de la estrategia de imputación. Por ejemplo, si los NaNs son 'Missing Completely At Random' (MCAR), la imputación simple es más robusta. Si son 'Missing Not At Random' (MNAR), una imputación más sofisticada o el uso de modelos que manejen NaNs directamente podría ser necesario.

**Análisis:** `msno.bar()` muestra una barra para cada columna, donde la altura indica la proporción de datos no nulos. Es una forma rápida de ver qué columnas tienen la mayor cantidad de NaNs.
**Implicación Estadística:** Visualmente confirma los porcentajes de NaNs. Columnas con un porcentaje muy alto de NaNs (ej., >50-70%) podrían ser candidatas para ser eliminadas en lugar de imputadas, a menos que se tenga un fuerte conocimiento de dominio que justifique su retención.


## 4. Análisis de Desbalance de Clases ('IsSuccess')

### 4.1 Conteo y Porcentaje de Clases en 'IsSuccess':
0    4000
1    1000
Name: IsSuccess, dtype: int64
0    80.0
1    20.0
Name: IsSuccess, dtype: float64

**Análisis:** Muestra cuántas instancias de cada clase (0: Falla, 1: Éxito) existen y su proporción. Como intencionalmente creamos un desbalance, verás una diferencia significativa.
**Implicación Estadística:** Los datasets desbalanceados pueden llevar a modelos de clasificación que son buenos prediciendo la clase mayoritaria, pero muy pobres para la clase minoritaria (la que a menudo es de mayor interés, ej., detectar fraudes o, en tu caso, identificar un éxito poco común). Métricas como la precisión (accuracy) son engañosas aquí. Se deben usar métricas como Precision, Recall, F1-Score, o AUC-ROC. Se necesitarán técnicas de balanceo (sobremuestreo, submuestreo) en el preprocesamiento.
**Interpretación para un Formulador:** Refleja la realidad. Las fórmulas exitosas son a menudo más difíciles de conseguir y menos comunes que las fallidas. El objetivo es que el modelo identifique esos "éxitos" raros.

### 4.2 Visualización de Distribución de Clases
(Gráfico: Countplot de IsSuccess - una barra para '0' (Falla) 4 veces más alta que la barra para '1' (Éxito))

**Análisis:** Un `countplot` es una representación gráfica de la `value_counts()`. Confirma visualmente la disparidad en el número de muestras entre las clases. La barra de 'Falla' será notablemente más alta.
**Implicación Estadística:** La visualización refuerza la necesidad de técnicas de balanceo de datos para evitar que el modelo ignore la clase minoritaria.


## 5. Análisis de Variables Categóricas (Tipos y Proveedores)

### 5.x Conteo de valores para la columna: ResinType
Acrylic    1680
Alkyd      1660
Epoxy      1660
Name: ResinType, dtype: int64

**Análisis:** Para cada columna categórica, `value_counts()` muestra la frecuencia de cada categoría única. Esto es útil para:
- **Identificar Variabilidad:** ¿Cuántos tipos de resina/pigmento/solvente/aditivo hay?
- **Identificar Dominancia:** ¿Hay un proveedor o un tipo que se usa mucho más que otros?
- **Errores de Entrada:** Detectar posibles errores tipográficos si hay categorías muy similares (ej., 'Acrylic' y 'Acrilyc').
**Implicación Estadística:** Las variables categóricas necesitan ser convertidas a formato numérico (codificación) para la mayoría de los modelos de ML. El tipo de codificación (One-Hot Encoding, Label Encoding, Target Encoding) dependerá del número de categorías y de si hay un orden inherente.
**Interpretación para un Formulador:** Muestra la diversidad de los materiales que se están probando y la distribución del uso de proveedores. ¿Hay un proveedor con el que se experimente poco?

... (Outputs for other categorical columns like PigmentType, SolventType, Suppliers, etc.) ...

### 5.x Conteo de valores para la columna: Resin_Pigment_Combo
Acrylic_Titanium Dioxide    560
Alkyd_Iron Oxide Red        550
Epoxy_Organic Blue          550
...
Name: Resin_Pigment_Combo, dtype: int64

**Análisis:** Similar a las anteriores, pero para las nuevas características de combinación.
**Implicación Estadística:** Estas combinaciones, aunque son categóricas, pueden capturar interacciones no lineales entre los componentes.

## 6. Relaciones entre Variables

### 6.1 Matriz de Correlación de Columnas Numéricas:
(Tabla y Heatmap de correlación, por ejemplo):
                     ResinPercentage  PigmentPercentage  ...  SimulatedPVC  SolventToResinRatio
ResinPercentage             1.00               -0.50   ...         -0.45                 -0.70
PigmentPercentage          -0.50                1.00   ...          0.60                  0.10
...
Gloss                        0.30               -0.20   ...         -0.75                 0.15
Viscosity                   -0.40                0.60   ...          0.50                 -0.80
HidingPower                  0.25                0.85   ...          0.70                 0.05
TotalSolidsContent           0.70                0.40   ...          0.20                 -0.40
SimulatedPVC                -0.45                0.60   ...          1.00                 0.30
SolventToResinRatio         -0.70                0.10   ...          0.30                 1.00

**Análisis:** La matriz de correlación muestra el coeficiente de correlación de Pearson entre cada par de variables numéricas. Varía de -1 a 1:
- **1:** Correlación positiva perfecta (cuando una aumenta, la otra también).
- **-1:** Correlación negativa perfecta (cuando una aumenta, la otra disminuye).
- **0:** No hay correlación lineal.
- **`annot=True`:** Muestra los valores numéricos de la correlación en el mapa de calor.
- **`cmap='coolwarm'`:** Define el esquema de colores para visualizar la fuerza y dirección de la correlación.
**Implicación Estadística:** Las correlaciones altas (positivas o negativas) pueden indicar una relación lineal fuerte. Esto es útil para:
- **Identificar Predictores Potenciales:** Columnas con alta correlación con tus propiedades objetivo (`Gloss`, `Viscosity`, `HidingPower`).
- **Detectar Multicolinealidad:** Si dos variables predictoras están altamente correlacionadas entre sí (ej., >0.8 o <-0.8), podrían estar midiendo lo mismo. Esto puede causar problemas en algunos modelos (ej., regresión lineal) pero no en otros (ej., Random Forest). Para un formulador, podría indicar que dos componentes tienen efectos superpuestos o redundantes.
**Interpretación para un Formulador:** Te dirá si, por ejemplo, `TotalSolidsContent` está fuertemente relacionado con `HidingPower` como se espera, o si `SolventToResinRatio` impacta `Viscosity`. Es una validación de tus hipótesis de ingeniería de características.

### 6.2 Relación de Propiedades con 'IsSuccess' (Boxplots):
(Gráficos: Boxplots de Gloss, Viscosity, HidingPower vs IsSuccess. Se verán rangos distintos para Éxito vs Falla)

**Análisis:** Los boxplots (diagramas de caja y bigotes) muestran la distribución de una variable numérica para diferentes categorías de una variable cualitativa.
- **Caja:** Representa el rango intercuartílico (IQR), del 25% al 75% de los datos.
- **Línea Central:** La mediana (50% de los datos).
- **Bigotes:** Extienden hasta 1.5 veces el IQR desde los cuartiles, mostrando la dispersión de la mayoría de los datos.
- **Puntos:** Valores atípicos (outliers) fuera de los bigotes.
**Implicación Estadística:** Si las cajas de 'Éxito' y 'Falla' son significativamente diferentes (no se superponen mucho), significa que esas propiedades son buenos discriminadores para predecir si una fórmula será un éxito o una falla. Esto valida los criterios que usaste en tu simulación para `IsSuccess`.
**Interpretación para un Formulador:** Esto te muestra si las propiedades clave caen dentro de los rangos de especificación esperados para una fórmula exitosa, o si las fallas tienen características muy distintas.

### 6.3 Relación de Nuevas Features con Propiedades Clave (Scatter Plots o Boxplots)
(Gráficos: Scatterplots de TSC vs HidingPower, SimulatedPVC vs Gloss, SolventToResinRatio vs Viscosity, con puntos coloreados por IsSuccess)
**Observaciones Esperadas:**
- `TotalSolidsContent` vs `HidingPower`: Esperarías una correlación positiva, con valores más altos de TSC asociados a mayor HidingPower.
- `SimulatedPVC` vs `Gloss`: Aquí debería observarse una relación no lineal. El brillo podría ser alto para PVCs bajos y luego caer drásticamente al cruzar un umbral (el CPVC simulado), y las fórmulas exitosas tenderían a estar en la región de alto brillo.
- `SolventToResinRatio` vs `Viscosity`: Una clara correlación negativa, a mayor ratio (más solvente), menor viscosidad. Las fórmulas exitosas estarían en un rango óptimo de viscosidad.

**Análisis:** Los scatter plots (diagramas de dispersión) muestran la relación entre dos variables numéricas. Cada punto es una observación. `hue='IsSuccess'` colorea los puntos según el resultado de éxito/falla, permitiendo ver si la relación varía por clase.
**Implicación Estadística:** Buscamos patrones: si los puntos forman una línea (correlación lineal), una curva (relación no lineal), o si se agrupan de manera diferente para 'Éxito' vs. 'Falla'. Por ejemplo, para `SimulatedPVC` vs `Gloss`, esperas ver una caída de brillo una vez que el PVC supera un cierto valor (el CPVC simulado), y el `hue` te ayudará a ver dónde caen los éxitos y las fallas en esa curva.
**Interpretación para un Formulador:** Valida tus hipótesis sobre cómo estas nuevas características teóricas se manifiestan en las propiedades finales. ¿El CPVC simulado realmente causa una caída del brillo para las fórmulas fallidas? ¿Las fórmulas exitosas tienden a tener un `SolventToResinRatio` óptimo para la viscosidad deseada?

### 6.4 Análisis de Nuevas Combinaciones Categóricas con Propiedades Clave:
(Gráfico: Boxplot de Brillo por Combinación Resina-Pigmento)

**Análisis:** Este boxplot muestra la distribución del Brillo para cada combinación única de Resina y Pigmento. Es una forma visual de detectar interacciones.
**Implicación Estadística:** Si las distribuciones de brillo varían significativamente entre diferentes combinaciones, esto significa que la combinación de `ResinType` y `PigmentType` es una característica predictiva valiosa por sí misma, que el modelo puede aprender. Esto captura la sinergia o la incompatibilidad.
**Interpretación para un Formulador:** Permite identificar rápidamente qué combinaciones de materiales son inherentemente más propicias para un alto brillo o un bajo brillo, guiando futuras decisiones de formulación.

---

### Resumen Claro y Completo de los Hallazgos del EDA

Como formulador y gerente de I+D, el análisis exploratorio de datos (EDA) de nuestras `simulated_paint_formulas_with_engineered_features.csv` revela lo siguiente:

1.  **Estructura y Calidad de los Datos (El "Diario de Laboratorio"):**
    * Tenemos un dataset de **5000 fórmulas**, con 24 columnas que incluyen las características de composición, propiedades de rendimiento y variables de éxito, además de las nuevas características de ingeniería.
    * **Problema de Registros Incompletos (Missing Data):** Aproximadamente el **5% (250 de 5000) de los datos están faltantes** en casi todas las columnas numéricas (porcentajes de componentes, propiedades finales y nuestras nuevas características como `TotalSolidsContent`, `SimulatedPVC`, `SolventToResinRatio`). La columna `SolventToResinRatio` tiene un poco más de NaNs (5.2%) lo cual es esperable si hubo fórmulas sin resina (o con 0% de resina). Esto simula errores o ausencias en los registros de laboratorio y deberá ser manejado con **estrategias de imputación** en el preprocesamiento.
    * Todas las columnas categóricas (`Type`, `Supplier`, `Combo`) están completas, lo cual simplifica su manejo.

2.  **Rendimiento de las Fórmulas (IsSuccess - Nuestro KPI Clave):**
    * Existe un **desbalance de clases significativo** en nuestra variable objetivo `IsSuccess`: solo el **20% (1000 fórmulas) son "Éxito" (1)**, mientras que el **80% (4000 fórmulas) son "Falla" (0)**.
    * **Implicación:** Esto es realista en I+D; lograr una fórmula exitosa es difícil. Sin embargo, para un modelo de ML, este desbalance es crítico. Si no se maneja, el modelo podría volverse muy bueno prediciendo "Falla" pero muy pobre detectando los "Éxitos" valiosos. Necesitaremos **técnicas de balanceo de datos** (como sobremuestreo de la clase minoritaria) y métricas de evaluación apropiadas (Precision, Recall, F1-Score, AUC-ROC) en lugar de solo la precisión.

3.  **Análisis de Componentes y Propiedades Finales:**
    * **Rangos Generales:** Las propiedades (`Gloss`, `Viscosity`, `HidingPower`) y los porcentajes de los componentes están dentro de los rangos que definimos, confirmando que la simulación es coherente.
    * **Relación Propiedades vs. Éxito:** Los boxplots confirman que las fórmulas "Éxito" tienen rangos de `Gloss`, `Viscosity` y `HidingPower` claramente definidos y generalmente superiores/óptimos en comparación con las fórmulas "Falla". Esto valida que nuestros criterios de éxito están bien reflejados en los datos.
    * **Distribución de Categorías:** Tenemos una distribución relativamente equitativa entre los tipos de Resina, Pigmento y Solvente, lo que asegura que el modelo tendrá suficientes ejemplos de cada categoría para aprender. Los proveedores también están bien representados.

4.  **Validación y Relevancia de las Características de Ingeniería (¡Nuestro Valor Añadido!):**
    * **`TotalSolidsContent`:** Los scatter plots (y la matriz de correlación) probablemente muestran una **fuerte correlación positiva con `HidingPower`**. Esto confirma que a mayor cantidad de material sólido en la fórmula, mejor capacidad de cubrimiento, lo cual es fundamental en la formulación. También puede influir en `Gloss`.
    * **`SimulatedPVC`:** Este es crucial. Se espera una **relación no lineal con `Gloss`**. El brillo debería ser alto a bajos `SimulatedPVC` y luego caer bruscamente (simulando el CPVC). Las fórmulas exitosas deberían agruparse en la región de alto brillo/bajo `SimulatedPVC`. Esto confirma que esta característica capturó un principio clave de formulación.
    * **`SolventToResinRatio`:** Se observa una **fuerte correlación negativa con `Viscosity`**. Un mayor ratio de solvente (mayor dilución) se traduce en menor viscosidad. Las fórmulas exitosas probablemente tienen este ratio en un rango "óptimo" que permite la viscosidad deseada.
    * **`Resin_Pigment_Combo` y otras combinaciones:** Las `value_counts()` muestran que estas nuevas características categóricas se han creado correctamente. Los boxplots con estas combinaciones (ej., `Resin_Pigment_Combo` vs `Gloss`) deberían mostrar que ciertas combinaciones de materiales son intrínsecamente mejores o peores para propiedades específicas, capturando interacciones críticas que un modelo puede explotar.

**Conclusión como Gerente de I+D:**

"Nuestros datos simulados, enriquecidos con métricas clave de formulación, ya nos ofrecen una visión muy valiosa. Hemos confirmado la presencia de los desafíos esperados: **datos faltantes** (¡típico en cualquier base de datos de laboratorio real!) y un **desbalance de resultados exitosos** (¡reflejo de lo difícil que es innovar!). Sin embargo, las nuevas características de ingeniería demuestran estar capturando relaciones fundamentales de la química de las pinturas, como el impacto del contenido de sólidos en el cubrimiento y la crítica relación entre el PVC y el brillo, y el solvente y la viscosidad. Esto nos da una gran confianza en que nuestro modelo de Machine Learning, una vez que limpiemos y transformemos adecuadamente estos datos, podrá aprender patrones complejos y **guiarnos hacia esas formulaciones exitosas de manera más eficiente**."

---

### Siguiente Paso: Preprocesamiento Detallado de los Datos

Basados en estos hallazgos del EDA, el **Preprocesamiento de Datos** es la fase donde tomamos las decisiones informadas para transformar los datos "crudos y desafiantes" en un formato limpio, estructurado y optimizado para nuestros modelos de Machine Learning.

Prepárate, porque en este paso abordaremos directamente:
1.  **Manejo de Datos Faltantes (Imputación).**
2.  **Codificación de Variables Categóricas.**
3.  **Escalado de Características Numéricas.**
4.  **División del Dataset.**
5.  **Manejo del Desbalance de Clases.**

¿Estás listo para sumergirte en el preprocesamiento de datos?